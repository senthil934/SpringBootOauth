https://github.com/liliumbosniacum/elasticsearch

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>SpringDataElasticSearch</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringDataElasticSearch</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>1.8</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


application.properties
elasticsearch.url=localhost:9200
server.port=2000
spring.elasticsearch.jest.connection-timeout=3000 # Connection timeout in milliseconds.
spring.elasticsearch.jest.multi-threaded=true # Enable connection requests from multiple execution threads.



es-settings.json
{
  "index": {

  }
}


vehicle.json
{
  "properties" : {
    "id": {
      "type": "keyword"
    },
    "number": {
      "type": "text"
    },
    "name": {
      "type": "text"
    },
    "created": {
      "type": "date"
    }
  }
}


Config.java

package com.pack.SpringDataElasticSearch.config;

import org.elasticsearch.client.RestHighLevelClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.elasticsearch.client.ClientConfiguration;
import org.springframework.data.elasticsearch.client.RestClients;
import org.springframework.data.elasticsearch.config.AbstractElasticsearchConfiguration;
import org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;

@Configuration
@EnableElasticsearchRepositories(basePackages = "com.pack.SpringDataElasticSearch.repository")
@ComponentScan(basePackages = {"com.pack.SpringDataElasticSearch"})
public class Config extends AbstractElasticsearchConfiguration {

    @Value("${elasticsearch.url}")
    public String elasticsearchUrl;

    @Bean
    @Override
    public RestHighLevelClient elasticsearchClient() {
        final ClientConfiguration config = ClientConfiguration.builder()
                .connectedTo(elasticsearchUrl)
                .build();

        return RestClients.create(config).rest();
    }
}


PersonController.java
package com.pack.SpringDataElasticSearch.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pack.SpringDataElasticSearch.document.Person;
import com.pack.SpringDataElasticSearch.service.PersonService;

@RestController
@RequestMapping("/api/person")
public class PersonController {
    
	@Autowired
    PersonService service;

    @PostMapping
    public void save(@RequestBody final Person person) {
        service.save(person);
    }

    @GetMapping("/{id}")
    public Person findById(@PathVariable final String id) {
        return service.findById(id);
    }
}


VehicleController.java
package com.pack.SpringDataElasticSearch.controller;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pack.SpringDataElasticSearch.document.Vehicle;
import com.pack.SpringDataElasticSearch.search.SearchRequestDTO;
import com.pack.SpringDataElasticSearch.service.VehicleDummyDataService;
import com.pack.SpringDataElasticSearch.service.VehicleService;

@RestController
@RequestMapping("/api/vehicle")
public class VehicleController {
	
	@Autowired
    VehicleService service;
	
	@Autowired
	VehicleDummyDataService dummyDataService;

    @PostMapping
    public void index(@RequestBody final Vehicle vehicle) {
        service.index(vehicle);
    }


    @GetMapping("/{id}")
    public Vehicle getById(@PathVariable final String id) {
        return service.getById(id);
    }

    @PostMapping("/search")
    public List<Vehicle> search(@RequestBody final SearchRequestDTO dto) {
        return service.search(dto);
    }
    
    @GetMapping("/search/{date}")
    public List<Vehicle> getAllVehiclesCreatedSince(
            @PathVariable
            @DateTimeFormat(pattern = "yyyy-MM-dd")
            final Date date) {
        return service.getAllVehiclesCreatedSince(date);
    }
    
    @PostMapping("/insertdummydata")
    public void insertDummyData() {
        dummyDataService.insertDummyData();
    }
    
    
    @PostMapping("/searchcreatedsince/{date}")
    public List<Vehicle> searchCreatedSince(
            @RequestBody final SearchRequestDTO dto,
            @PathVariable
            @DateTimeFormat(pattern = "yyyy-MM-dd")
            final Date date) {
        return service.searchCreatedSince(dto, date);
    }
}

Person.java
package com.pack.SpringDataElasticSearch.document;

import org.springframework.data.annotation.Id;
import org.springframework.data.elasticsearch.annotations.Document;
import org.springframework.data.elasticsearch.annotations.Field;
import org.springframework.data.elasticsearch.annotations.FieldType;
import org.springframework.data.elasticsearch.annotations.Setting;

import com.pack.SpringDataElasticSearch.helper.Indices;


@Document(indexName = Indices.PERSON_INDEX)
@Setting(settingPath = "static/es-settings.json")
public class Person {

    @Id
    @Field(type = FieldType.Keyword)
    private String id;

    @Field(type = FieldType.Text)
    private String name;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}


Vehicle.java
package com.pack.SpringDataElasticSearch.document;

import java.util.Date;

import com.fasterxml.jackson.annotation.JsonFormat;

public class Vehicle {
    private String id;
    private String number;
    private String name;
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date created;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Date getCreated() {
        return created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }
}


Indices.java
package com.pack.SpringDataElasticSearch.helper;

public final class Indices {

    public static final String PERSON_INDEX = "person";
    public static final String VEHICLE_INDEX = "vehicle";
}


Util.java
package com.pack.SpringDataElasticSearch.helper;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.ClassPathResource;

import java.io.File;
import java.nio.file.Files;

public class Util {
    private static final Logger LOG = LoggerFactory.getLogger(Util.class);

    public static String loadAsString(final String path) {
        try {
            final File resource = new ClassPathResource(path).getFile();

            return new String(Files.readAllBytes(resource.toPath()));
        } catch (final Exception e) {
            LOG.error(e.getMessage(), e);
            return null;
        }
    }
}


PersonRepository.java
package com.pack.SpringDataElasticSearch.repository;

import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;

import com.pack.SpringDataElasticSearch.document.Person;

public interface PersonRepository extends ElasticsearchRepository<Person, String> {
}


PagedRequestDTO.java
package com.pack.SpringDataElasticSearch.search;

public class PagedRequestDTO {
    private static final int DEFAULT_SIZE = 100;

    private int page;
    private int size;

    public int getPage() {
        return page;
    }

    public void setPage(int page) {
        this.page = page;
    }

    public int getSize() {
        return size != 0 ? size : DEFAULT_SIZE;
    }

    public void setSize(int size) {
        this.size = size;
    }
}


SearchRequestDTO.java
package com.pack.SpringDataElasticSearch.search;

import java.util.List;

import org.elasticsearch.search.sort.SortOrder;

public class SearchRequestDTO extends PagedRequestDTO{
	private List<String> fields;
    private String searchTerm;
    private String sortBy;
    private SortOrder order;

    public List<String> getFields() {
        return fields;
    }

    public void setFields(List<String> fields) {
        this.fields = fields;
    }

    public String getSearchTerm() {
        return searchTerm;
    }

    public void setSearchTerm(String searchTerm) {
        this.searchTerm = searchTerm;
    }

    public String getSortBy() {
        return sortBy;
    }

    public void setSortBy(String sortBy) {
        this.sortBy = sortBy;
    }

    public SortOrder getOrder() {
        return order;
    }

    public void setOrder(SortOrder order) {
        this.order = order;
    }

   
}


SearchUtil.java
package com.pack.SpringDataElasticSearch.search;

import java.util.Date;
import java.util.List;

import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.MultiMatchQueryBuilder;
import org.elasticsearch.index.query.Operator;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.util.CollectionUtils;

public final class SearchUtil {

	private SearchUtil() {
	}

	// Step 3: For searching

	/*public static SearchRequest buildSearchRequest(final String indexName, final SearchRequestDTO dto) {
		try {
			final SearchSourceBuilder builder = new SearchSourceBuilder().postFilter(getQueryBuilder(dto));
			;

			SearchRequest request = new SearchRequest(indexName);
			request.source(builder);

			return request;
		} catch (final Exception e) {
			e.printStackTrace();
			return null;
		}
	}*/

	// Searching QueryBuilder
	private static QueryBuilder getQueryBuilder(final SearchRequestDTO dto) {
		if (dto == null) {
			return null;
		}

		final List<String> fields = dto.getFields();
		if (CollectionUtils.isEmpty(fields)) {
			return null;
		}

		if (fields.size() > 1) {
			final MultiMatchQueryBuilder queryBuilder = QueryBuilders.multiMatchQuery(dto.getSearchTerm())
					.type(MultiMatchQueryBuilder.Type.CROSS_FIELDS).operator(Operator.AND);

			fields.forEach(queryBuilder::field);

			return queryBuilder;
		}

		return fields.stream().findFirst()
				.map(field -> QueryBuilders.matchQuery(field, dto.getSearchTerm()).operator(Operator.AND)).orElse(null);
	}

	// Step 4:For Sorting
	/*public static SearchRequest buildSearchRequest(final String indexName, final SearchRequestDTO dto) {
		try {

			SearchSourceBuilder builder = new SearchSourceBuilder().postFilter(getQueryBuilder(dto));

			if (dto.getSortBy() != null) {
				builder = builder.sort(dto.getSortBy(), dto.getOrder() != null ? dto.getOrder() : SortOrder.ASC);
			}

			final SearchRequest request = new SearchRequest(indexName);
			request.source(builder);

			return request;
		} catch (final Exception e) {
			e.printStackTrace();
			return null;
		}
	}*/

	// Step 5: For range query
	public static SearchRequest buildSearchRequest(final String indexName, final String field, final Date date) {
		try {
			final SearchSourceBuilder builder = new SearchSourceBuilder().postFilter(getQueryBuilder(field, date));

			final SearchRequest request = new SearchRequest(indexName);
			request.source(builder);

			return request;
		} catch (final Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	// Range QueryBuilder
	private static QueryBuilder getQueryBuilder(final String field, final Date date) {
		return QueryBuilders.rangeQuery(field).gte(date);
	}

	// Step 6:Bool Query
	public static SearchRequest buildSearchRequest(final String indexName, final SearchRequestDTO dto,
			final Date date) {
		try {
			final QueryBuilder searchQuery = getQueryBuilder(dto);
			final QueryBuilder dateQuery = getQueryBuilder("created", date);

			// final BoolQueryBuilder boolQuery =
			// QueryBuilders.boolQuery().must(searchQuery).must(dateQuery);
			final BoolQueryBuilder boolQuery = QueryBuilders.boolQuery().mustNot(searchQuery).must(dateQuery);

			SearchSourceBuilder builder = new SearchSourceBuilder().postFilter(boolQuery);

			if (dto.getSortBy() != null) {
				builder = builder.sort(dto.getSortBy(), dto.getOrder() != null ? dto.getOrder() : SortOrder.ASC);
			}

			final SearchRequest request = new SearchRequest(indexName);
			request.source(builder);

			return request;
		} catch (final Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	//Step 7: Pagination
	
	public static SearchRequest buildSearchRequest(final String indexName, final SearchRequestDTO dto) {
		try {

			final int page = dto.getPage();
            final int size = dto.getSize();
            final int from = page <= 0 ? 0 : page * size;

            SearchSourceBuilder builder = new SearchSourceBuilder()
                    .from(from)
                    .size(size)
                    .postFilter(getQueryBuilder(dto));
            
			if (dto.getSortBy() != null) {
				builder = builder.sort(dto.getSortBy(), dto.getOrder() != null ? dto.getOrder() : SortOrder.ASC);
			}

			final SearchRequest request = new SearchRequest(indexName);
			request.source(builder);

			return request;
		} catch (final Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}


IndexService.java
package com.pack.SpringDataElasticSearch.service;

import java.util.Arrays;
import java.util.List;

import javax.annotation.PostConstruct;

import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.client.indices.CreateIndexRequest;
import org.elasticsearch.client.indices.GetIndexRequest;
import org.elasticsearch.common.xcontent.XContentType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.pack.SpringDataElasticSearch.helper.Indices;
import com.pack.SpringDataElasticSearch.helper.Util;

@Service
public class IndexService {
    private static final Logger LOG = LoggerFactory.getLogger(IndexService.class);
    private static final List<String> INDICES = Arrays.asList(Indices.VEHICLE_INDEX);
    private final RestHighLevelClient client;

    @Autowired
    public IndexService(RestHighLevelClient client) {
        this.client = client;
    }

    @PostConstruct
    public void tryToCreateIndices() {
        recreateIndices(false);
    }

    public void recreateIndices(final boolean deleteExisting) {
        final String settings = Util.loadAsString("static/es-settings.json");

        if (settings == null) {
            LOG.error("Failed to load index settings");
            return;
        }

        for (final String indexName : INDICES) {
            try {
                final boolean indexExists = client
                        .indices()
                        .exists(new GetIndexRequest(indexName), RequestOptions.DEFAULT);
                if (indexExists) {
                    if (!deleteExisting) {
                        continue;
                    }

                    client.indices().delete(
                            new DeleteIndexRequest(indexName),
                            RequestOptions.DEFAULT
                    );
                }

                final CreateIndexRequest createIndexRequest = new CreateIndexRequest(indexName);
                createIndexRequest.settings(settings, XContentType.JSON);

                final String mappings = loadMappings(indexName);
                if (mappings != null) {
                    createIndexRequest.mapping(mappings, XContentType.JSON);
                }

                client.indices().create(createIndexRequest, RequestOptions.DEFAULT);
            } catch (final Exception e) {
                LOG.error(e.getMessage(), e);
            }
        }
    }

    private String loadMappings(String indexName) {
        final String mappings = Util.loadAsString("static/mappings/" + indexName + ".json");
        if (mappings == null) {
            LOG.error("Failed to load mappings for index with name '{}'", indexName);
            return null;
        }

        return mappings;
    }
}


PersonService.java
package com.pack.SpringDataElasticSearch.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.pack.SpringDataElasticSearch.document.Person;
import com.pack.SpringDataElasticSearch.repository.PersonRepository;

@Service
public class PersonService {

	@Autowired
    PersonRepository repository;

    public void save(final Person person) {
        repository.save(person);
    }

    public Person findById(final String id) {
        return repository.findById(id).orElse(null);
    }
}


VehicleDummyDataService.java
package com.pack.SpringDataElasticSearch.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.pack.SpringDataElasticSearch.document.Vehicle;

@Service
public class VehicleDummyDataService {
	private static final Logger LOG = LoggerFactory.getLogger(VehicleDummyDataService.class);
	private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

    @Autowired
    VehicleService vehicleService;

	public void insertDummyData() {
		vehicleService.index(buildVehicle("1", "Audi A1", "AAA-123", "2010-01-01"));
		vehicleService.index(buildVehicle("2", "Audi A3", "AAB-123", "2011-07-05"));
		vehicleService.index(buildVehicle("3", "Audi A3", "AAC-123", "2012-10-03"));

		vehicleService.index(buildVehicle("4", "BMW M3", "AAA-023", "2021-10-06"));
		vehicleService.index(buildVehicle("5", "BMW 3", "1AA-023", "2001-10-01"));
		vehicleService.index(buildVehicle("6", "BMW M5", "12A-023", "1999-05-08"));

		vehicleService.index(buildVehicle("7", "VW Golf", "42A-023", "1991-04-08"));
		vehicleService.index(buildVehicle("8", "VW Passat", "18A-023", "2021-04-08"));

		vehicleService.index(buildVehicle("9", "Skoda Kodiaq", "28A-023", "2020-01-04"));
		vehicleService.index(buildVehicle("10", "Skoda Yeti", "88A-023", "2015-03-09"));
	}

	private static Vehicle buildVehicle(final String id, final String name, final String number, final String date) {
		Vehicle vehicle = new Vehicle();
		vehicle.setId(id);
		vehicle.setName(name);
		vehicle.setNumber(number);
		try {
			vehicle.setCreated(DATE_FORMAT.parse(date));
		} catch (ParseException e) {
			LOG.error(e.getMessage(), e);
		}

		return vehicle;
	}

}


VehicleService.java
package com.pack.SpringDataElasticSearch.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.elasticsearch.action.get.GetRequest;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.SearchHit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pack.SpringDataElasticSearch.document.Vehicle;
import com.pack.SpringDataElasticSearch.helper.Indices;
import com.pack.SpringDataElasticSearch.search.SearchRequestDTO;
import com.pack.SpringDataElasticSearch.search.SearchUtil;

@Service
public class VehicleService {
    private static final ObjectMapper MAPPER = new ObjectMapper();
    private static final Logger LOG = LoggerFactory.getLogger(VehicleService.class);

    @Autowired
    RestHighLevelClient client;

    public Boolean index(final Vehicle vehicle) {
        try {
            final String vehicleAsString = MAPPER.writeValueAsString(vehicle);

            final IndexRequest request = new IndexRequest(Indices.VEHICLE_INDEX);
            request.id(vehicle.getId());
            request.source(vehicleAsString, XContentType.JSON);

            final IndexResponse response = client.index(request, RequestOptions.DEFAULT);

            return response != null && response.status().equals(RestStatus.OK);
        } catch (final Exception e) {
            LOG.error(e.getMessage(), e);
            return false;
        }
    }

    public Vehicle getById(final String vehicleId) {
        try {
        	 GetRequest getRequest=new GetRequest(Indices.VEHICLE_INDEX, vehicleId);
        	 getRequest.realtime(false);
            final GetResponse documentFields = client.get(getRequest,RequestOptions.DEFAULT);
            if (documentFields == null || documentFields.isSourceEmpty()) {
                return null;
            }

            return MAPPER.readValue(documentFields.getSourceAsString(), Vehicle.class);
        } catch (final Exception e) {
            LOG.error(e.getMessage(), e);
            return null;
        }
    }
    
    public List<Vehicle> search(final SearchRequestDTO dto) {
        final SearchRequest request = SearchUtil.buildSearchRequest(
                Indices.VEHICLE_INDEX,
                dto
        );

        return searchInternal(request);
    }
    
    private List<Vehicle> searchInternal(final SearchRequest request) {
        if (request == null) {
            LOG.error("Failed to build search request");
            return Collections.emptyList();
        }

        try {
            final SearchResponse response = client.search(request, RequestOptions.DEFAULT);

            final SearchHit[] searchHits = response.getHits().getHits();
            final List<Vehicle> vehicles = new ArrayList<>(searchHits.length);
            for (SearchHit hit : searchHits) {
                vehicles.add(
                        MAPPER.readValue(hit.getSourceAsString(), Vehicle.class)
                );
            }

            return vehicles;
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            return Collections.emptyList();
        }
    }
    
    public List<Vehicle> getAllVehiclesCreatedSince(final Date date) {
        final SearchRequest request = SearchUtil.buildSearchRequest(
                Indices.VEHICLE_INDEX,
                "created",
                date
        );

        return searchInternal(request);
    }
    
    public List<Vehicle> searchCreatedSince(final SearchRequestDTO dto, final Date date) {
        final SearchRequest request = SearchUtil.buildSearchRequest(
                Indices.VEHICLE_INDEX,
                dto,
                date
        );

        return searchInternal(request);
    }

}
